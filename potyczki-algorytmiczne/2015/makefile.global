
CONTEST_PROVIDER = PA

ifeq ($(CONTEST_PROVIDER), PA)
CC			= gcc
CFLAGS		= -w -O2 -static -m32 -pedantic -Wall -Werror
CXX			= g++
CXXFLAGS	= -w -O2 -static -std=c++11 -m32 -pedantic -Wall -Werror
LDLIBS		= -lm
else ifeq ($(CONTEST_PROVIDER), OPSS)
CFLAGS		= -w -std=gnu99 --static -Wall -Werror -Wno-long-long
CXXFLAGS	= -w --static -pedantic -Wall
LDLIBS		= -lm
endif

TOCLEAN		+= $(PROG)
PROGEXEC    ?= ./$(PROG)

all:    $(PROG)

%.class: %.java
	javac $^

clean:
	rm -rf $(TOCLEAN)

mail:
	mail 'judge@acm.timus.ru' -s 'Solution' -c 'krystian@brazulewicz.pl' < $(SRC)

test: all test-plain test-bz2 test-xz

test-plain:
	@find test -name '*.in' -print | sort | while read testIn; do \
        testRef=`echo $$testIn | sed -e 's/\.in/\.out/'`; \
        testOut=`mktemp`; \
		testInTmp=`mktemp`; \
		testRefTmp=`mktemp`; \
        if [ -f $$testRef ]; then \
			cp $$testRef $$testRefTmp; \
		elif [ -f $${testRef}.bz2 ]; then \
            bzcat $${testRef}.bz2 > $$testRefTmp; \
		else \
			continue; \
		fi; \
        if [ -f $$testIn ]; then \
            $(PROGEXEC) < $$testIn > $$testOut; \
            diff -w $$testOut $$testRefTmp; \
            if [ $$? -ne 0 ]; then \
                echo test $$testIn: FAILURE; \
            else \
                echo test $$testIn: OK; \
            fi \
        fi; \
		rm $$testOut; \
		rm $$testInTmp; \
		rm $$testRefTmp; \
	done

test-bz2:
	@find test -name '*.in.bz2' -print | sort | while read testIn; do \
        testRef=`echo $$testIn | sed -e 's/\.in.bz2/\.out/'`; \
        testOut=`mktemp`; \
		testInTmp=`mktemp`; \
		testRefTmp=`mktemp`; \
        if [ -f $$testRef ]; then \
			cp $$testRef $$testRefTmp; \
		elif [ -f $${testRef}.bz2 ]; then \
            bzcat $${testRef}.bz2 > $$testRefTmp; \
		else \
			continue; \
		fi; \
        if [ -f $$testIn ]; then \
            bzcat $$testIn | $(PROGEXEC) > $$testOut; \
            diff -w $$testOut $$testRefTmp; \
            if [ $$? -ne 0 ]; then \
                echo test $$testIn: FAILURE; \
            else \
                echo test $$testIn: OK; \
            fi \
        fi; \
		rm $$testOut; \
		rm $$testInTmp; \
		rm $$testRefTmp; \
	done

test-xz:
	@find test -name '*.in.xz' -print | sort | while read testIn; do \
        testRef=`echo $$testIn | sed -e 's/\.in.xz/\.out/'`; \
        testOut=`mktemp`; \
		testInTmp=`mktemp`; \
		testRefTmp=`mktemp`; \
        if [ -f $$testRef ]; then \
			cp $$testRef $$testRefTmp; \
		elif [ -f $${testRef}.xz ]; then \
            xzcat $${testRef}.xz > $$testRefTmp; \
		else \
			continue; \
		fi; \
        if [ -f $$testIn ]; then \
            xzcat $$testIn | $(PROGEXEC) > $$testOut; \
            diff -w $$testOut $$testRefTmp; \
            if [ $$? -ne 0 ]; then \
                echo test $$testIn: FAILURE; \
            else \
                echo test $$testIn: OK; \
            fi \
        fi; \
		rm $$testOut; \
		rm $$testInTmp; \
		rm $$testRefTmp; \
	done
